// Generated by view binder compiler. Do not edit!
package org.tensorflow.lite.examples.audio.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatCheckBox;
import androidx.appcompat.widget.AppCompatImageButton;
import androidx.appcompat.widget.AppCompatSpinner;
import androidx.appcompat.widget.LinearLayoutCompat;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.github.angads25.toggle.widget.LabeledSwitch;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.tensorflow.lite.examples.audio.R;

public final class ControlsBottomSheetBinding implements ViewBinding {
  @NonNull
  private final NestedScrollView rootView;

  @NonNull
  public final LinearLayoutCompat audioContainer;

  @NonNull
  public final NestedScrollView bottomSheetLayout;

  @NonNull
  public final AppCompatCheckBox checkBox1;

  @NonNull
  public final AppCompatCheckBox checkBox2;

  @NonNull
  public final AppCompatCheckBox checkBox3;

  @NonNull
  public final TextView inferenceTimeLabel;

  @NonNull
  public final TextView inferenceTimeVal;

  @NonNull
  public final LabeledSwitch playSwitch;

  @NonNull
  public final TextView recordingLabel;

  @NonNull
  public final AppCompatImageButton resultsMinus;

  @NonNull
  public final AppCompatImageButton resultsPlus;

  @NonNull
  public final TextView resultsValue;

  @NonNull
  public final AppCompatSpinner spinnerOverlap;

  @NonNull
  public final AppCompatImageButton threadsMinus;

  @NonNull
  public final AppCompatImageButton threadsPlus;

  @NonNull
  public final TextView threadsValue;

  @NonNull
  public final AppCompatImageButton thresholdMinus;

  @NonNull
  public final AppCompatImageButton thresholdPlus;

  @NonNull
  public final TextView thresholdValue;

  private ControlsBottomSheetBinding(@NonNull NestedScrollView rootView,
      @NonNull LinearLayoutCompat audioContainer, @NonNull NestedScrollView bottomSheetLayout,
      @NonNull AppCompatCheckBox checkBox1, @NonNull AppCompatCheckBox checkBox2,
      @NonNull AppCompatCheckBox checkBox3, @NonNull TextView inferenceTimeLabel,
      @NonNull TextView inferenceTimeVal, @NonNull LabeledSwitch playSwitch,
      @NonNull TextView recordingLabel, @NonNull AppCompatImageButton resultsMinus,
      @NonNull AppCompatImageButton resultsPlus, @NonNull TextView resultsValue,
      @NonNull AppCompatSpinner spinnerOverlap, @NonNull AppCompatImageButton threadsMinus,
      @NonNull AppCompatImageButton threadsPlus, @NonNull TextView threadsValue,
      @NonNull AppCompatImageButton thresholdMinus, @NonNull AppCompatImageButton thresholdPlus,
      @NonNull TextView thresholdValue) {
    this.rootView = rootView;
    this.audioContainer = audioContainer;
    this.bottomSheetLayout = bottomSheetLayout;
    this.checkBox1 = checkBox1;
    this.checkBox2 = checkBox2;
    this.checkBox3 = checkBox3;
    this.inferenceTimeLabel = inferenceTimeLabel;
    this.inferenceTimeVal = inferenceTimeVal;
    this.playSwitch = playSwitch;
    this.recordingLabel = recordingLabel;
    this.resultsMinus = resultsMinus;
    this.resultsPlus = resultsPlus;
    this.resultsValue = resultsValue;
    this.spinnerOverlap = spinnerOverlap;
    this.threadsMinus = threadsMinus;
    this.threadsPlus = threadsPlus;
    this.threadsValue = threadsValue;
    this.thresholdMinus = thresholdMinus;
    this.thresholdPlus = thresholdPlus;
    this.thresholdValue = thresholdValue;
  }

  @Override
  @NonNull
  public NestedScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ControlsBottomSheetBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ControlsBottomSheetBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.controls_bottom_sheet, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ControlsBottomSheetBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.audio_container;
      LinearLayoutCompat audioContainer = ViewBindings.findChildViewById(rootView, id);
      if (audioContainer == null) {
        break missingId;
      }

      NestedScrollView bottomSheetLayout = (NestedScrollView) rootView;

      id = R.id.checkBox1;
      AppCompatCheckBox checkBox1 = ViewBindings.findChildViewById(rootView, id);
      if (checkBox1 == null) {
        break missingId;
      }

      id = R.id.checkBox2;
      AppCompatCheckBox checkBox2 = ViewBindings.findChildViewById(rootView, id);
      if (checkBox2 == null) {
        break missingId;
      }

      id = R.id.checkBox3;
      AppCompatCheckBox checkBox3 = ViewBindings.findChildViewById(rootView, id);
      if (checkBox3 == null) {
        break missingId;
      }

      id = R.id.inference_time_label;
      TextView inferenceTimeLabel = ViewBindings.findChildViewById(rootView, id);
      if (inferenceTimeLabel == null) {
        break missingId;
      }

      id = R.id.inference_time_val;
      TextView inferenceTimeVal = ViewBindings.findChildViewById(rootView, id);
      if (inferenceTimeVal == null) {
        break missingId;
      }

      id = R.id.playSwitch;
      LabeledSwitch playSwitch = ViewBindings.findChildViewById(rootView, id);
      if (playSwitch == null) {
        break missingId;
      }

      id = R.id.recording_label;
      TextView recordingLabel = ViewBindings.findChildViewById(rootView, id);
      if (recordingLabel == null) {
        break missingId;
      }

      id = R.id.results_minus;
      AppCompatImageButton resultsMinus = ViewBindings.findChildViewById(rootView, id);
      if (resultsMinus == null) {
        break missingId;
      }

      id = R.id.results_plus;
      AppCompatImageButton resultsPlus = ViewBindings.findChildViewById(rootView, id);
      if (resultsPlus == null) {
        break missingId;
      }

      id = R.id.results_value;
      TextView resultsValue = ViewBindings.findChildViewById(rootView, id);
      if (resultsValue == null) {
        break missingId;
      }

      id = R.id.spinner_overlap;
      AppCompatSpinner spinnerOverlap = ViewBindings.findChildViewById(rootView, id);
      if (spinnerOverlap == null) {
        break missingId;
      }

      id = R.id.threads_minus;
      AppCompatImageButton threadsMinus = ViewBindings.findChildViewById(rootView, id);
      if (threadsMinus == null) {
        break missingId;
      }

      id = R.id.threads_plus;
      AppCompatImageButton threadsPlus = ViewBindings.findChildViewById(rootView, id);
      if (threadsPlus == null) {
        break missingId;
      }

      id = R.id.threads_value;
      TextView threadsValue = ViewBindings.findChildViewById(rootView, id);
      if (threadsValue == null) {
        break missingId;
      }

      id = R.id.threshold_minus;
      AppCompatImageButton thresholdMinus = ViewBindings.findChildViewById(rootView, id);
      if (thresholdMinus == null) {
        break missingId;
      }

      id = R.id.threshold_plus;
      AppCompatImageButton thresholdPlus = ViewBindings.findChildViewById(rootView, id);
      if (thresholdPlus == null) {
        break missingId;
      }

      id = R.id.threshold_value;
      TextView thresholdValue = ViewBindings.findChildViewById(rootView, id);
      if (thresholdValue == null) {
        break missingId;
      }

      return new ControlsBottomSheetBinding((NestedScrollView) rootView, audioContainer,
          bottomSheetLayout, checkBox1, checkBox2, checkBox3, inferenceTimeLabel, inferenceTimeVal,
          playSwitch, recordingLabel, resultsMinus, resultsPlus, resultsValue, spinnerOverlap,
          threadsMinus, threadsPlus, threadsValue, thresholdMinus, thresholdPlus, thresholdValue);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
